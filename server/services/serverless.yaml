service: memory-service

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: '*'
  stage: ${self:custom.currentStage}
  logRetentionInDays: 30
  timeout: 30
  environment:
    region: ${file(./config/serverless.config.${self:custom.currentStage}.yml):region}
    usersTableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):usersTableName}
    devicesTableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):devicesTableName}
    levelsTableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):levelsTableName}
    gemAuditTableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):gemAuditTableName}
    skillItemAuditTableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):skillItemAuditTableName}
    purchasesTableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):purchasesTableName}
    dynamoDBEndpoint: ${file(./config/serverless.config.${self:custom.currentStage}.yml):dynamoDBEndpoint}
    dynamoDBaccessKey: ${file(./config/serverless.config.${self:custom.currentStage}.yml):dynamoDBaccessKey}
    dynamoDBaccessSecret: ${file(./config/serverless.config.${self:custom.currentStage}.yml):dynamoDBaccessSecret}
    LoggerLevel: ${file(./config/serverless.config.${opt:stage,self:custom.defaultStage}.yml):LoggerLevel}
    LoggerStack: ${file(./config/serverless.config.${opt:stage,self:custom.defaultStage}.yml):LoggerStack}
  apiGateway:
    restApiId: ${cf:memory-apigateway-service-dev.ApiGatewayId}
    restApiRootResourceId: ${cf:memory-apigateway-service-dev.ApiGatewayRootResourceId}

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  serverless-offline:
    port: 5000

functions:
  MEMORY-SERVICE:
    name: 'MEMORY-SERVICE-${self:custom.currentStage}'
    description: Maintain user data
    handler: src/index.handler
    events:
      - http:
          path: /user/{proxy+}
          method: any
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - Content-Length
              - X-Requested-With
              - User-Id
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Unity-Version
              - Accept
              - X-Access-Token
              - X-Application-Name
              - X-Request-Sent-Time
      - http:
          path: /user
          method: any
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - Content-Length
              - X-Requested-With
              - User-Id
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Unity-Version
              - Accept
              - X-Access-Token
              - X-Application-Name
              - X-Request-Sent-Time
      - http:
          path: /device/{proxy+}
          method: any
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - Content-Length
              - X-Requested-With
              - User-Id
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Unity-Version
              - Accept
              - X-Access-Token
              - X-Application-Name
              - X-Request-Sent-Time
      - http:
          path: /ping
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - Content-Length
              - X-Requested-With
              - User-Id
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Unity-Version
              - Accept
              - X-Access-Token
              - X-Application-Name
              - X-Request-Sent-Time              
resources:
  Resources:
    UsersTableName:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):usersTableName}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
    DevicesTableName:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):devicesTableName}
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'id'
            KeyType: 'RANGE'
        GlobalSecondaryIndexes:
          - IndexName: DeviceIdIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    LevelsTableName:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):levelsTableName}
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'id'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST        
    GemAuditTableName:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):gemAuditTableName}
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'id'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST         
    SkillItemAuditTableName:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):skillItemAuditTableName}
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'id'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST      
    PurchasesTableName:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):purchasesTableName}
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'id'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST                          
plugins:
  - serverless-plugin-typescript
  - serverless-offline
